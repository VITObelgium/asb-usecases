#!/usr/bin/python

import logging
import subprocess
import inspect
import json
import base64
import os

# --------------------------------------------------------------------------------------
# Save this code in file "process_wrapper.py" and adapt as indicated in inline comments.
#
# Notes:
#  - This is a Python 2 script. It is incompatible with Python 3.
#  - The inputs will be given values by name, thus their order has no importance ...
#  - ... except that the inputs with a default value must be listed last.
#  - Parameter names are automatically converted into valid Python variable names.
#  - Any empty line or line starting with a '#' character will be ignored.
# --------------------------------------------------------------------------------------

SNAP_HOME='/home/worker/snap/'
JAVA_HOME='/usr/local/jre'
JRE_HOME='/usr/local/jre'
GEOTRIPLES_HOME='/usr/local/geotriples'

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def execute(out_dir, string_in):
    """
    Inputs:
    string_in -- string_in -- 45/User String

    Outputs:
    string_out -- string_out -- 45/User String

    Main Dependency:
    python-2

    Software Dependencies:
    python-3
    sci_tools_py-x.y

    Processing Resources:
    ram -- 1
    disk -- 1
    cpu -- 1
    """

    string_out = None

    # ----------------------------------------------------------------------------------
    # Insert your own code below.
    # The files generated by your code must be stored in the "out_dir" folder.
    # Only the content of that folder is persisted in the datastore.
    # Give appropriate values to the output parameters. These will be passed to the next
    # process(es) following the workflow connections.
    # ----------------------------------------------------------------------------------

    logger.info("Starting...")
    
    PYTHON3_EXEC=os.environ.get('PYTHON3_EXEC','../venv36/bin/python3')
    MODULE_EXEC=os.environ.get('MODULE_EXEC', 'environment_scanner.process_wrapper')
    frame = inspect.currentframe()
    args,_,_,vals = inspect.getargvalues(frame)
    arglist=[[i, vals[i]] for i in args]
    b64arglist=base64.b64encode(json.dumps(arglist))
    p=subprocess.Popen([PYTHON3_EXEC,'process_client.py',MODULE_EXEC,b64arglist],stdout=subprocess.PIPE,stderr=subprocess.PIPE,env={})
    stdout,stderr=p.communicate()
    logger.info(p.returncode)
    logger.info(stdout)
    logger.info(stderr)
    retlist=list(filter(lambda i: 'RETURN_VALUE_STRING=' in i,stdout.split('\n')))[0]
    retobj=base64.b64decode(retlist.replace('RETURN_VALUE_STRING=','',1))
    # TODO: output names not matching
    return retobj
    
    # ----------------------------------------------------------------------------------
    # The wrapper must return a dictionary that contains the output parameter values.
    # ----------------------------------------------------------------------------------
#     return {
#         "string_out": string_out
#     }