#!/usr/bin/python

import logging
# import sys
# import pkgutil
# import json

# --------------------------------------------------------------------------------------
# Save this code in file "process_wrapper.py" and adapt as indicated in inline comments.
#
# Notes:
#  - This is a Python 3 script.
#  - The inputs will be given values by name, thus their order has no importance ...
#  - ... except that the inputs with a default value must be listed last.
#  - Parameter names are automatically converted into valid Python variable names.
#  - Any empty line or line starting with a '#' character will be ignored.
# --------------------------------------------------------------------------------------


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def execute(out_dir, dummy):
    """
    Inputs:
    dummy -- dummy -- 45/User String

    Outputs:
    sys_data -- sys_data -- 45/User String

    Main Dependency:
    mep-wps/uc-bundle-1

    Software Dependencies:
    pywps-4

    Processing Resources:
    ram -- 1
    disk -- 1
    cpu -- 1
    """



    sys_data = "blah"#{}

    # ----------------------------------------------------------------------------------
    # Insert your own code below.
    # The files generated by your code must be stored in the "out_dir" folder.
    # Only the content of that folder is persisted in the datastore.
    # Give appropriate values to the output parameters. These will be passed to the next
    # process(es) following the workflow connections.
    # ----------------------------------------------------------------------------------

    logger.info("Starting...")

#     def tryfunc(entry,func):
#         try:
#             sys_data[entry]=func()
#         except Exception as e:
#             sys_data[entry]="ERROR TRYFUNC" #str(e)
# 
#     def pythonversion():
#         return str(sys.version).replace('\n', '')
#     
#     def pymodules_namesonly():  
#         return [i[1] for i in pkgutil.iter_modules()]
# 
#     def pymodules_withcache():  
#         cache=set()
#         pkgs=[]
#         for i in  pkgutil.iter_modules():
#             cache=cache.union(i[0]._path_cache)
#         for i in  pkgutil.iter_modules():
#             n=[]
#             for j in cache:
#                 if i.name in j:
#                     n.append(j)
#             pkgs.append([i.name,n])
#         pkgs=sorted(pkgs,key= lambda i: i[0])
#         return pkgs
#     
#     tryfunc('python_version',pythonversion)
#     #tryfunc('modules_names',pymodules_namesonly)
#     #tryfunc('modules_withcache',pymodules_withcache)
# 
#     try:
#         sys_data=json.dumps(sys_data)
#     except Exception as e:
#         sys_data="ERROR JSON" #str(e)

    # ----------------------------------------------------------------------------------
    # The wrapper must return a dictionary that contains the output parameter values.
    # ----------------------------------------------------------------------------------
    return {
        "sys_data": sys_data
    }
