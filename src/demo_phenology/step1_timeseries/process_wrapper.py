#!/usr/bin/python

import logging
import json
import os
import shapely.geometry
from shapely import affinity
import openeo

# --------------------------------------------------------------------------------------
# Save this code in file "process_wrapper.py" and adapt as indicated in inline comments.
#
# Notes:
#  - This is a Python 3 script.
#  - The inputs will be given values by name, thus their order has no importance ...
#  - ... except that the inputs with a default value must be listed last.
#  - Parameter names are automatically converted into valid Python variable names.
#  - Any empty line or line starting with a '#' character will be ignored.
# --------------------------------------------------------------------------------------

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def execute(out_dir, layer_id, field, daterange):
    """
    Inputs:
    layer_id -- layer_id -- 45/User String
    field -- field -- 45/User String
    daterange -- daterange -- 45/User String

    Outputs:
    time_series -- time_series -- 45/User String

    Main Dependency:
    mep-wps/uc-bundle-1

    Software Dependencies:
    pywps-4

    Processing Resources:
    ram -- 1
    disk -- 1
    cpu -- 1
    gpu -- 0
    """

    # ----------------------------------------------------------------------------------
    # Insert your own code below.
    # The files generated by your code must be stored in the "out_dir" folder.
    # Only the content of that folder is persisted in the datastore.
    # Give appropriate values to the output parameters. These will be passed to the next
    # process(es) following the workflow connections.
    # ----------------------------------------------------------------------------------

    logger.info("Starting...")

    openeo_url = 'http://openeo.vgt.vito.be/openeo/1.0.0/'
    openeo_user=os.environ.get('USER', 'anonymous')
    openeo_pass=openeo_user+'123'

    def timeseries_query():

        # find the extents, utm zone in epsg code for lat/lon of centroid and the bounding box polygon
        fields=json.loads(field)
        polys = shapely.geometry.GeometryCollection([shapely.geometry.shape(feature["geometry"]).buffer(0) for feature in fields["features"]])
        polys = affinity.scale(polys, 1., 1.)
        extent = dict(zip(["west", "south", "east", "north"], polys.bounds))
        extent['crs'] = "EPSG:4326"
    
        # connection
        eoconn = openeo.connect(openeo_url)
        eoconn.authenticate_basic(openeo_user, openeo_pass)

        # prepare the Sentinel-2 bands via masking by the scene classification layer 
        dates=json.loads(daterange)
        result = (
            eoconn\
                .load_collection(layer_id)\
                .filter_temporal(dates['start'],dates['end'])\
                .filter_bbox(**extent)\
                .polygonal_mean_timeseries(polys)\
                .execute()
        )
    
        # formatting
        for ipoly in range(len(fields["features"])):
            ts= sorted(
                    list(
                        filter(
                            lambda g: g[1] is not None,
                            map(
                                lambda i: (i[0],i[1][ipoly][0]),
                                filter(
                                    lambda f: len(f[1][ipoly])>0,
                                    result.items()
                                )
                            )
                        )
                    ),
                    key=lambda k: k[0]
                )
            fields["features"][ipoly]["timeseries"]=ts
            del fields["features"][ipoly]["geometry"]        

        return fields


    os.environ["HOME"]="/home/asb"
    time_series=timeseries_query()

    logger.info('Finished...')

    # ----------------------------------------------------------------------------------
    # The wrapper must return a dictionary that contains the output parameter values.
    # ----------------------------------------------------------------------------------
    return {
        "time_series": json.dumps(time_series)
    }
    
    