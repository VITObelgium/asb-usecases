#!/usr/bin/python

import logging

# --------------------------------------------------------------------------------------
# Save this code in file "process_wrapper.py" and adapt as indicated in inline comments.
#
# Notes:
#  - This is a Python 2 script. It is incompatible with Python 3.
#  - The inputs will be given values by name, thus their order has no importance ...
#  - ... except that the inputs with a default value must be listed last.
#  - Parameter names are automatically converted into valid Python variable names.
#  - Any empty line or line starting with a '#' character will be ignored.
# --------------------------------------------------------------------------------------

SNAP_HOME='/home/worker/snap/'
JAVA_HOME='/usr/local/jre'
JRE_HOME='/usr/local/jre'
GEOTRIPLES_HOME='/usr/local/geotriples'

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def execute(out_dir, input_1='input1'):
    """
    Inputs:
    input_1 -- Input_1 -- 45/User String -- input1

    Outputs:
    output_1 -- Output_1 -- 45/User String

    Main Dependency:
    python-2

    Software Dependencies:

    Processing Resources:
    ram -- 2
    disk -- 10
    cpu -- 1
    """

    output_1 = "output1"
    try:
        output_1=output_1+'_'+str(out_dir)+'_'+str(input_1)
    finally:
        pass

    # ----------------------------------------------------------------------------------
    # Insert your own code below.
    # The files generated by your code must be stored in the "out_dir" folder.
    # Only the content of that folder is persisted in the datastore.
    # Give appropriate values to the output parameters. These will be passed to the next
    # process(es) following the workflow connections.
    # ----------------------------------------------------------------------------------

    logger.info("Starting...")

    # ...


    # ----------------------------------------------------------------------------------
    # The wrapper must return a dictionary that contains the output parameter values.
    # ----------------------------------------------------------------------------------
    return {
        "output_1": output_1
    }
