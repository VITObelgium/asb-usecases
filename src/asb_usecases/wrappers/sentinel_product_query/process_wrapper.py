#!/usr/bin/python

import logging
import json
#import sys

# --------------------------------------------------------------------------------------
# Save this code in file "process_wrapper.py" and adapt as indicated in inline comments.
#
# Notes:
#  - This is a Python 3 script.
#  - The inputs will be given values by name, thus their order has no importance ...
#  - ... except that the inputs with a default value must be listed last.
#  - Parameter names are automatically converted into valid Python variable names.
#  - Any empty line or line starting with a '#' character will be ignored.
# --------------------------------------------------------------------------------------

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def execute(out_dir, fields_geojson, daterange_json):
    """
    Inputs:
    fields_geojson -- fields_geojson -- 45/User String
    daterange_json -- daterange_json -- 45/User String

    Outputs:
    daterange_json -- daterange_json -- 45/User String
    products_json -- products_json -- 45/User String
    tilesAndDates_json -- tilesAndDates_json -- 45/User String
    tilesAndShapes_json -- tilesAndShapes_json -- 45/User String

    Main Dependency:
    mep-wps/uc-bundle-1

    Software Dependencies:
    pywps-4

    Processing Resources:
    ram -- 1
    disk -- 1
    cpu -- 1
    """

    products_json = None
    tilesAndDates_json = None
    tilesAndShapes_json = None

    # ----------------------------------------------------------------------------------
    # Insert your own code below.
    # The files generated by your code must be stored in the "out_dir" folder.
    # Only the content of that folder is persisted in the datastore.
    # Give appropriate values to the output parameters. These will be passed to the next
    # process(es) following the workflow connections.
    # ----------------------------------------------------------------------------------

    logger.info("Starting...")
    
    #sys.path.append('/data/public/banyait/code')
    from asb_usecases.logic.sentinel_product_query.query_creodias import CreoDiasQuery
    from asb_usecases.logic.sentinel_product_query.query_copernicus import CopernicusQuery

    fields=json.loads(fields_geojson)
    daterange=json.loads(daterange_json)
    
    catalog=CreoDiasQuery()
    #catalog=CopernicusQuery()

    # TODO do not need date range for this, just take today - 1 month
    catalog.query(fields,daterange['start'],daterange['end'],100)
    products=catalog.getProductIds()
    tilesAndDates=catalog.getTakenDatesPerTileIds()
    tilesAndShapes=catalog.getShapesPerTileIds()
    products_json=json.dumps(products)
    tilesAndDates_json=json.dumps(tilesAndDates)
    tilesAndShapes_json=json.dumps(tilesAndShapes)

    # ----------------------------------------------------------------------------------
    # The wrapper must return a dictionary that contains the output parameter values.
    # ----------------------------------------------------------------------------------
    return {
        "daterange_json": daterange_json,
        "products_json": products_json,
        "tilesAndDates_json": tilesAndDates_json,
        "tilesAndShapes_json": tilesAndShapes_json
    }