#!/usr/bin/python

import logging
import json
import os
#import uuid
import base64
import pathlib

# --------------------------------------------------------------------------------------
# Save this code in file "process_wrapper.py" and adapt as indicated in inline comments.
#
# Notes:
#  - This is a Python 3 script.
#  - The inputs will be given values by name, thus their order has no importance ...
#  - ... except that the inputs with a default value must be listed last.
#  - Parameter names are automatically converted into valid Python variable names.
#  - Any empty line or line starting with a '#' character will be ignored.
# --------------------------------------------------------------------------------------

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def execute(out_dir, layer_id, field_geojson, daterange_json):
    """
    Inputs:
    layer_id -- layer_id -- 45/User String
    field_geojson -- field_geojson -- 45/User String
    daterange_json -- daterange_json -- 45/User String

    Outputs:
    status_json -- status_json -- 45/User String
    ndvicube_json -- ndvicube_json -- 45/User String

    Main Dependency:
    mep-wps/uc-bundle-1

    Software Dependencies:
    pywps-4

    Processing Resources:
    ram -- 1
    disk -- 1
    cpu -- 1
    gpu -- 0
    """

    # ----------------------------------------------------------------------------------
    # Insert your own code below.
    # The files generated by your code must be stored in the "out_dir" folder.
    # Only the content of that folder is persisted in the datastore.
    # Give appropriate values to the output parameters. These will be passed to the next
    # process(es) following the workflow connections.
    # ----------------------------------------------------------------------------------

    logger.info("Starting...")

    status_json = ["definition"]
    ndvicube_json = ""

    openeo_url = 'http://openeo-dev.vgt.vito.be/openeo/1.0.0/'
    openeo_user='banyait'
    openeo_pass='banyait123'
    #logfile="/data/public/"+openeo_user+"/garbage/"+str(uuid.uuid4().hex)+".log"

    def log_everywhere(msg:str):
        #print(msg)
        logger.info(msg)
        status_json.append(msg)
        #with open(logfile,"a+") as f: f.write(msg+"\n")

    try:

        log_everywhere("tryenter")

        def inner_run(layer_id, field_geojson, daterange_json):
    
            #log_everywhere("custom:environ")
            #for k,v in os.environ.items(): log_everywhere("->"+k+"="+str(base64.b64encode(str(v).encode('ascii')),'ascii'))
            log_everywhere("custom:before:HOME:"+str(os.environ.get('HOME', '<HOME_NOT_FOUND>')))
            log_everywhere("custom:before:home():"+str(pathlib.Path("").home()))
            log_everywhere("custom:before:expanduser():"+str(pathlib.Path("").expanduser()))
            os.environ["HOME"]="/home/asb"
            log_everywhere("custom:after:HOME:"+str(os.environ.get('HOME', '<HOME_NOT_FOUND>')))
            log_everywhere("custom:after:home():"+str(pathlib.Path("").home()))
            log_everywhere("custom:after:expanduser():"+str(pathlib.Path("").expanduser()))
            
            #log_everywhere("custom:home:"+str(pathlib.Path("~").expanduser()))

            log_everywhere("started")
    
            import shapely.geometry
            from shapely import affinity
            import openeo
    
            log_everywhere("imported")
    
            # find the extents, utm zone in epsg code for lat/lon of centroid and the bounding box polygon
            field=json.loads(field_geojson)
            polys = shapely.geometry.GeometryCollection([shapely.geometry.shape(feature["geometry"]).buffer(0) for feature in field["features"]])
            polys = affinity.scale(polys, 1., 1.)
            extent = dict(zip(["west", "south", "east", "north"], polys.bounds))
            extent['crs'] = "EPSG:4326"
            bboxpoly=shapely.geometry.Polygon.from_bounds(*polys.bounds)
        
            log_everywhere("geomlookup")
    
            # connection
            eoconn = openeo.connect(openeo_url)
            eoconn.authenticate_basic(openeo_user, openeo_pass)
    
            log_everywhere("authenticated")
        
            # prepare the Sentinel-2 bands via masking by the scene classification layer 
            daterange=json.loads(daterange_json)
            ndvi_cube = eoconn.load_collection(layer_id).filter_temporal(daterange['start'],daterange['end']).filter_bbox(**extent)
        
            # download the data
            temp_file=os.path.join(out_dir,"result.json")
            ndvi_cube.download(temp_file,format='json')
            
            log_everywhere("downloaded")
            
            with open(temp_file) as f: ndvicube_json=f.read()
    
            log_everywhere("finished")
            
            return ndvicube_json

        ndvicube_json=inner_run(layer_id, field_geojson, daterange_json)
                
    except Exception as e:
        try:
            log_everywhere(str(base64.b64encode(str(e).encode('ascii')),'ascii'))
        except Exception as f:
            status_json.append(str(base64.b64encode((str(f)+" *** during *** "+str(e)).encode('ascii')),'ascii'))

    # ----------------------------------------------------------------------------------
    # The wrapper must return a dictionary that contains the output parameter values.
    # ----------------------------------------------------------------------------------
    return {
        "status_json": json.dumps(status_json),
        "ndvicube_json": ndvicube_json
    }
    
    