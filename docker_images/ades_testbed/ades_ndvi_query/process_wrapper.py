#!/usr/bin/python

import logging
import json
import shapely.geometry
from shapely import affinity
import openeo
import os

# --------------------------------------------------------------------------------------
# Save this code in file "process_wrapper.py" and adapt as indicated in inline comments.
#
# Notes:
#  - This is a Python 3 script.
#  - The inputs will be given values by name, thus their order has no importance ...
#  - ... except that the inputs with a default value must be listed last.
#  - Parameter names are automatically converted into valid Python variable names.
#  - Any empty line or line starting with a '#' character will be ignored.
# --------------------------------------------------------------------------------------

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def execute(out_dir, layer_id, field_geojson, daterange_json):
    """
    Inputs:
    layer_id -- layer_id -- 45/User String
    field_geojson -- field_geojson -- 45/User String
    daterange_json -- daterange_json -- 45/User String

    Outputs:
    ndvicube_json -- ndvicube_json -- 45/User String

    Main Dependency:
    mep-wps/uc-bundle-1

    Software Dependencies:
    pywps-4

    Processing Resources:
    ram -- 1
    disk -- 1
    cpu -- 1
    """

    ndvicube_json = None

    # ----------------------------------------------------------------------------------
    # Insert your own code below.
    # The files generated by your code must be stored in the "out_dir" folder.
    # Only the content of that folder is persisted in the datastore.
    # Give appropriate values to the output parameters. These will be passed to the next
    # process(es) following the workflow connections.
    # ----------------------------------------------------------------------------------

    logger.info("Starting...")

    # find the extents, utm zone in epsg code for lat/lon of centroid and the bounding box polygon
    field=json.loads(field_geojson)
    polys = shapely.geometry.GeometryCollection([shapely.geometry.shape(feature["geometry"]).buffer(0) for feature in field["features"]])
    polys = affinity.scale(polys, 1., 1.)
    extent = dict(zip(["west", "south", "east", "north"], polys.bounds))
    extent['crs'] = "EPSG:4326"
    bboxpoly=shapely.geometry.Polygon.from_bounds(*polys.bounds)

    # connection
    openeo_url = 'http://openeo-dev.vgt.vito.be/openeo/1.0.0/'
    openeo_user='banyait'
    openeo_pass='banyait123'
    eoconn = openeo.connect(openeo_url)
    eoconn.authenticate_basic(openeo_user, openeo_pass)

    # prepare the Sentinel-2 bands via masking by the scene classification layer 
    daterange=json.loads(daterange_json)
    ndvi_cube = eoconn.load_collection(layer_id).filter_temporal(daterange['start'],daterange['end']).filter_bbox(**extent)

    # download the data
    temp_file=os.path.join(out_dir,"result.json")
    ndvi_cube.download(temp_file,format='json')
    with open(temp_file) as f: ndvicube_json=f.read()

    # ----------------------------------------------------------------------------------
    # The wrapper must return a dictionary that contains the output parameter values.
    # ----------------------------------------------------------------------------------
    return {
        "ndvicube_json": ndvicube_json
    }